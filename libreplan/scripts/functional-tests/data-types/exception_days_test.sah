/*
 * This file is part of LibrePlan
 *
 * Copyright (C) 2011-2012 Igalia, S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* Included tests
 *
 * 1 - Create a new Calendar Exception Day
 * 2 - Create a Calendar Exception Day with duplicate type (it should be a failure)
 * 3 - Create a Calendar Exception Day with empty type (it should be a failure)
 * 4 - Create a Calendar Exception Day with duplicate name (it should be a failure)
 * 5 - Edit a Calendar Exception Day
 * 6 - Check code label
 *   6.1 - Change configuration
 *   6.2 - Try to create a new Exception day without Code (it should be a failure)
 *   6.3 - Change configuration like before
 * 7 - Delete Calendar Exception Day
 *
*/
_include("../common_functions.sah");

function exceptDayCreate($name, $standar, $color) {
    commonCreate("Calendar Exception Days");
    exceptDayForm($name, $standar, $color);
    commonSaveValidation("Calendar Exception Day", $name);
    _log("Create a new Calendar Exception Day", "custom1");
}

function exceptDayCreateDuplicateName($name, $standar, $color) {
    commonCreate("Calendar Exception Days");
    exceptDayForm($name, $standar, $color);
    exceptDayNotValid($name);
    _log("Do not allow create an exception day with duplicate name", "custom1");
}

function exceptDayCreateEmpty($name, $standar, $color) {
    commonCreate("Calendar Exception Days");
    exceptDayForm($name, $standar, $color);
    _assertExists(_div("cannot be empty"));
    _assert(_isVisible(_div("cannot be empty")));
    _log("Do not allow create an exception day without name", "custom1");
}

function exceptDayForm($name, $standar, $color){
    _setValue(_textbox(0, _near(_span("Name"))), $name);
    _removeFocus(_textbox(0, _near(_span("Name"))));
    _setSelected(_select(0, _near(_span("Color"))),$color);
    _removeFocus(_select(0, _near(_span("Color"))));
    _setValue(_textbox(0, _near(_span("Standard Effort"))), $standar);
    _click(_cell("Save"));
}

/* test to check a that LibrePlan give us a error */
function exceptDayNotValid($ExceptDayName){
    _assertExists(_span("name is already used"));
    _assert(_isVisible(_span("name is already used")));
}

function exceptDayEdit($oldName, $newName, $cell){
    commonEdit($oldName, $cell);
    exceptDayFormSaveAndContinue($newName);
    commonSaveValidation("Calendar Exception Day", $newName);
    _log("Edit the exception day", "custom1");
}

function exceptDayFormSaveAndContinue($name){
    _setValue(_textbox(0, _near(_span("Name"))), $name);
    _removeFocus(_textbox(0, _near(_span("Name"))));
    _click(_cell("Save and Continue"));
    _assertExists(_cell("Save and Continue"));
    _assert(_isVisible(_cell("Save and Continue")));
}

function exceptDayCheckCode($exceptDayName){
    commonConfigurationChangeCheckboxMainPreferences("Calendar exception days");
    exceptDayCreateWithoutCode($exceptDayName);
    commonConfigurationChangeCheckboxMainPreferences("Calendar exception days");
    _log("Check code label", "custom1");
}

function exceptDayCreateWithoutCode($name){
    commonCreate("Calendar Exception Days");
    exceptDayForm($name,"","");
    commonEmptyCodeValidation();
}

/* test values */
var $exceptDayName = "new";
var $exceptDaystandar = "8";
var $exceptDayName2 = "new2";
var $exceptDayNewName = "newest";


/* test actions */
commonLogin("admin", "admin");

exceptDayCreate($exceptDayName, $exceptDaystandar, 2);
exceptDayCreateDuplicateName($exceptDayName, $exceptDaystandar, 1);
exceptDayCreateEmpty("", $exceptDaystandar,"");

exceptDayEdit($exceptDayName, $exceptDayNewName, 5);

exceptDayCheckCode($exceptDayName);

commonDelete("Calendar Exception Days", $exceptDayNewName, 5);
commonDeleteValidation("Calendar Exception Day", $exceptDayNewName);
_log("Delete the exception day", "custom1");

commonLogout();
